@page "/customer"
@using DevexpressBlazorXpo.DataAccess
@using DevexpressBlazorXpo.Services

@inject CustomerService CustomerService
@inject OrderService OrderService

<h1>Customers</h1>



@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <DxDataGrid Data=@customers KeyFieldName="Oid"
            AllowDataRowSelection=false PageSize="10" ShowFilterRow=true
            RowRemoving=@( (dataItem) => this.OnRowRemoving(dataItem) )
            RowUpdating=@( (updatingDataItem, values) => OnRowUpdating(updatingDataItem, values) )
            RowInserting=@( (values) => OnRowInserting(values, typeof(Customer)) )>

        <DxDataGridCommandColumn Width="100px"></DxDataGridCommandColumn>
        <DxDataGridColumn Width="100px" Field=@nameof(Customer.Oid) Visible="true" EditorVisible="false"></DxDataGridColumn>
        <DxDataGridColumn Field=@nameof(Customer.FirstName)></DxDataGridColumn>
        <DxDataGridColumn Field=@nameof(Customer.LastName)></DxDataGridColumn>
        <DxDataGridCommandColumn Width="50px">
            <CellTemplate>
                <button class="btn btn-link dxbs-button" @onclick="@( ()=>OnClickCustomerOrders((Customer)context) )" data-bs-toggle="modal" data-bs-target="#exampleModal">Orders</button>
            </CellTemplate>
            <HeaderCellTemplate></HeaderCellTemplate>
            <HeaderFilterCellTemplate></HeaderFilterCellTemplate>
        </DxDataGridCommandColumn>
    </DxDataGrid>

    <DxPopup @bind-Visible="@PopupVisible" Width="90%">
        <BodyTemplate Context="PopupContext">
            @if (selectedCustomerOrders != null && SelectedCustomer != null)
            {
                <DxDataGrid Data=@selectedCustomerOrders KeyFieldName="Oid"
                    AllowDataRowSelection=false PageSize=5 ShowFilterRow=false
                    RowRemoving=@( (dataItem) => this.OnRowRemoving(dataItem) )
                    RowUpdating=@( (updatingDataItem, values) => OnRowUpdating(updatingDataItem, values))
                    RowInserting=@( (values) => OnRowInserting(values, typeof(Order)))>
                    <DxDataGridCommandColumn Width="100px"></DxDataGridCommandColumn>
                    <DxDataGridColumn Field="@nameof(Order.Oid)" Visible="true" EditorVisible="false">
                    </DxDataGridColumn>
                    <DxDataGridDateEditColumn Field=@nameof(Order.OrderDate)></DxDataGridDateEditColumn>
                    <DxDataGridColumn Field=@nameof(Order.ProductName)></DxDataGridColumn>
                    <DxDataGridSpinEditColumn Field=@nameof(Order.Freight)></DxDataGridSpinEditColumn>
                    <DxDataGridComboBoxColumn Field=@(nameof(Customer))
                                      Data=@customers TextFieldName="ContactName"
                                      Caption=@nameof(Customer)>
                    </DxDataGridComboBoxColumn>
                </DxDataGrid>
            }
        </BodyTemplate>
    </DxPopup>
}


@code {
    private IQueryable<Customer> customers;
    private IQueryable<Order> selectedCustomerOrders;

    private Customer SelectedCustomer { get; set; }
    bool PopupVisible { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.Get();
    }
    async void OnRowInserting(Dictionary<string, object> values, Type type)
    {
        if (type == typeof(Customer))
        {

            await CustomerService.Add(values);
        }
        else if (type == typeof(Order))
        {
            await OrderService.Add(values, SelectedCustomer.Oid);
        }
        StateHasChanged();
    }
    async void OnRowUpdating(object item, Dictionary<string, object> values)
    {
        Customer customer = item as Customer;
        if (customer != null)
        {
            await CustomerService.Update(customer.Oid, values);
        }
        else
        {
            Order order = item as Order;
            if (order != null)
            {
                await OrderService.Update(order.Oid, values);
            }
        }
        StateHasChanged();
    }
    async void OnRowRemoving(object item)
    {
        Customer customer = item as Customer;
        if (customer != null)
        {
            await CustomerService.Delete(customer.Oid);
        }
        else
        {
            Order order = item as Order;
            if (order != null)
            {
                await OrderService.Delete(order.Oid);
            }
        }
        StateHasChanged();
    }
    async void OnClickCustomerOrders(Customer item)
    {
        SelectedCustomer = item;
        selectedCustomerOrders = await OrderService.GetCustomerOrders(item.Oid);
        PopupVisible = true;
        StateHasChanged();
    }
    void OnSelectedItemChanged(Customer customerReference, CellEditContext context)
    {
        context.OnChanged(customerReference != null ? (object)customerReference.Oid : null);
    }
}